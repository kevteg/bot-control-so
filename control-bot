#!/usr/bin/env python
# -*- coding: utf-8 -*-

import telegram
import logging
import sys

class conbot:
    def __init__ (self):
        root = logging.getLogger()
        root.setLevel(logging.INFO)
        ch = logging.StreamHandler(sys.stdout)
        ch.setLevel(logging.DEBUG)
        formatter = \
            logging.Formatter('Hora: %(asctime)s \
                               Objeto: %(name)s \
                               Tipo de dato: %(levelname)s \
                               Mensaje: %(message)s')
        ch.setFormatter(formatter)
        root.addHandler(ch)
        logger = logging.getLogger(__name__)
        self.comandos = {'start': self.start,
                    'help': self.help,
                    'cd': self.cd,
                    'ls': self.ls,
                    'pwd': self.pwd,
                    'comando': self.comando,
                    'sudo': self.sudo}
        usuario = "@keeeevin"
        self.mensaje_saludo = "Hola. Soy un bot de control para la computadora de " + usuario + ".\nDe tener acceso podras navegar, \
                                descargar datos y ejecutar comandos en su computadora"
        self.mensaje_ayuda  = self.mensaje_saludo + "\n\nMis comandos son: \
                                                help - Ayuda del bot\
                                                cd - Mostrar carpetas y archivos para cambiar ubicacion actual       \
                                                ls - Mostrar carpetas y archivos para cambiar ubicacion actual       \
                                                pwd - Mostrar ruta actual\
                                                comando - Ejecutar un comando\
                                                sudo - Guardar contraseña de super usuario\
                                                "
        self.main()
    '''
    brief: Método inicial que crea el handler de comandos
    '''
    def main(self):
        token = open("token", "r")
        updater = telegram.Updater(token.read().rstrip('\n'))
        # Registrar los controladores de comandos
        dp = updater.dispatcher
        #Agregar comandos
        for comando, metodo in self.comandos.iteritems():
            dp.addTelegramCommandHandler(comando, metodo)
        # Si no se recibe un comando
        dp.addTelegramMessageHandler(self.echo)
        # Si sucede un error se pinta mensaje de error
        dp.addErrorHandler(self.error)
        # Iniciar el bot
        updater.start_polling(timeout=5)
        updater.idle()
    '''
    brief: Saludo al ususario
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def start(self, bot, update):
        self.enviarMensaje(bot, update, self.mensaje_saludo)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def help(self, bot, update):
        self.enviarMensaje(bot, update, self.mensaje_ayuda)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def echo(self, bot, update):
        bot.sendMessage(update.message.chat_id, text=update.message.text)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def cd(self, bot, update):
        bot.sendMessage(update.message.chat_id, text=update.message.text)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def ls(self, bot, update):
        bot.sendMessage(update.message.chat_id, text=update.message.text)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def pwd(self, bot, update):
        bot.sendMessage(update.message.chat_id, text=update.message.text)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def comando(self, bot, update):
        bot.sendMessage(update.message.chat_id, text=update.message.text)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
    '''
    def sudo(self, bot, update):
        bot.sendMessage(update.message.chat_id, text=update.message.text)
    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           bot:        bot que esta en funcionamiento
           error:      error a mostrar
    '''
    def error(self, bot, update, error):
        logger.warn('Update "%s" caused error "%s"' % (update, error))

    '''
    brief: Método que envia una respuesta al update
    param: update:     actualización que llamo el comando
           respuesta:  respuesta a enviar
    '''
    def enviarMensaje(self, bot, update, respuesta):
        chat_id = update.message.chat_id
        nombre_usuario = update.message.from_user.first_name
        alias          = update.message.from_user.username
        print "Protobot dice a " + nombre_usuario.encode('utf-8') + " (" + alias.encode('utf-8') + "): " + respuesta
        reply_markup = telegram.ReplyKeyboardHide(hide_keyboard = True)
        bot.sendChatAction(chat_id=chat_id, action=telegram.ChatAction.TYPING)
        bot.sendMessage(chat_id=chat_id, text=respuesta, reply_markup=reply_markup)
robot = conbot()
